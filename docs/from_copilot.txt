From copilot
------------

[250913]


=====================================================================================================
To use Bluetooth with C/C++ on a Raspberry Pi 3, you have several options depending on your goals and
the level of abstraction you prefer. Here's a breakdown of the most practical approaches:
=====================================================================================================


#1
1. Using BlueZ with C/C++

BlueZ is the official Linux Bluetooth protocol stack. You can interact with it using:

    Low-level HCI (Host Controller Interface) commands.
    Socket API via libbluetooth-dev.
    D-Bus API (recommended for BLE).

Basic Setup

Install required packages:

sudo apt-get install bluetooth bluez libbluetooth-dev

Example: Using HCI with C

You can use functions like hci_get_route() and hci_open_dev() to interact with the Bluetooth adapter:

#include &lt;bluetooth/bluetooth.h&gt;

#include &lt;bluetooth/hci.h&gt;

#include &lt;bluetooth/hci_lib.h&gt;

 

int main() {

    int dev_id = hci_get_route(NULL);

    int sock = hci_open_dev(dev_id);

    if (dev_id &lt; 0 || sock &lt; 0) {

        perror("Bluetooth device not found");

        exit(1);

    }

    // Perform scan or other HCI operations

    close(sock);

    return 0;

}

This is good for classic Bluetooth but limited for BLE.
https://forums.raspberrypi.com/viewtopic.php?t=321835


#2
2. Using GATTLib for BLE

GATTLib is a C library that wraps BlueZ's D-Bus API for BLE operations like reading/writing characteristics.

    GitHub: GATTLib
    Example: read_write.c

This is ideal for BLE devices and simplifies the complexity of D-Bus 

https://stackoverflow.com/questions/30386577/c-c-ble-read-write-example-with-bluez


#3
3. Using btferret for HCI-Level Control

If you want to avoid BlueZ entirely and work directly with HCI packets, the btferret project provides a minimal C interface for Bluetooth communication:

    GitHub: btferret
    It bypasses BlueZ and uses raw HCI commands.
    Suitable for advanced users who need full control

https://forums.raspberrypi.com/viewtopic.php?t=321835


#4
4. BlueZ/GDBus Examples

If you're comfortable with D-Bus and want to explore more structured examples, this GitHub repo offers a collection of C programs using BlueZ and GDBus:

    GitHub: nkim-bitzap/bluetooth   (https://github.com/nkim-bitzap/bluetooth)
    Includes advertising, profiles, and device communication

https://github.com/nkim-bitzap/bluetooth

#5
Recommendations

    For classic Bluetooth, use libbluetooth-dev and socket APIs.
    For BLE, prefer GATTLib or BlueZ D-Bus API.
    For low-level control, explore btferret.

Would you like a working example for a specific use case (e.g., scanning, connecting, reading a BLE characteristic)?

=====================================================================================================
o connect to a Bluetooth device using C/C++ on a Raspberry Pi 3, you can use the BlueZ stack and its
socket-based API for classic Bluetooth, or GATTLib for BLE (Bluetooth Low Energy). Here's how to do
it for both types:
=====================================================================================================

#1
Classic Bluetooth (RFCOMM)
--------------------------

This method is suitable for devices like Bluetooth serial modules.

Steps:

    Install dependencies:
    sudo apt-get install libbluetooth-dev
    
Sample C code to connect:

    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;bluetooth/bluetooth.h&gt;
    #include &lt;bluetooth/rfcomm.h&gt;
     
    int main() {
        struct sockaddr_rc addr = { 0 };
        int s, status;
        char dest[] = "XX:XX:XX:XX:XX:XX"; // Replace with your device's MAC address
     
        s = socket(AF_BLUETOOTH, SOCK_STREAM, BTPROTO_RFCOMM);
     
        addr.rc_family = AF_BLUETOOTH;
        addr.rc_channel = (uint8_t) 1;
        str2ba(dest, &amp;addr.rc_bdaddr);
     
        status = connect(s, (struct sockaddr *)&amp;addr, sizeof(addr));
     
        if (status == 0) {
            write(s, "hello!", 6);
        } else {
            perror("Failed to connect");
        }
     
        close(s);
        return 0;
    }


#2
BLE (Bluetooth Low Energy) using GATTLib
----------------------------------------

This is better for connecting to BLE devices like sensors or fitness trackers.

make

sudo make install

2. **Sample C code to connect and read a characteristic:**

```c

#include <gattlib.h>

#include <stdio.h>

 

int main() {

    gatt_connection_t* connection;

    const char* addr = "XX:XX:XX:XX:XX:XX"; // BLE device MAC

    uuid_t uuid;

    char buffer[100];

    size_t len;

 

    connection = gattlib_connect(NULL, addr, GATTLIB_CONNECTION_OPTIONS_LEGACY_DEFAULT);

    if (connection == NULL) {

        fprintf(stderr, "Failed to connect.\n");

        return 1;

    }

 

    gattlib_string_to_uuid("00002a00-0000-1000-8000-00805f9b34fb", strlen("00002a00-0000-1000-8000-00805f9b34fb"), &uuid);

    gattlib_read_char_by_uuid(connection, &uuid, buffer, &len);

 

    printf("Read: %.*s\n", (int)len, buffer);

 

    gattlib_disconnect(connection);

    return 0;

}


Would you like help with scanning for nearby devices or discovering available services and characteristics before connecting?




















































